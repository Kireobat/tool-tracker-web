/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ToolTypeDto } from './ToolTypeDto';
import {
    ToolTypeDtoFromJSON,
    ToolTypeDtoFromJSONTyped,
    ToolTypeDtoToJSON,
    ToolTypeDtoToJSONTyped,
} from './ToolTypeDto';

/**
 * 
 * @export
 * @interface ToolDto
 */
export interface ToolDto {
    /**
     * 
     * @type {number}
     * @memberof ToolDto
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof ToolDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ToolDto
     */
    serial: string;
    /**
     * 
     * @type {string}
     * @memberof ToolDto
     */
    status: ToolDtoStatusEnum;
    /**
     * 
     * @type {ToolTypeDto}
     * @memberof ToolDto
     */
    type: ToolTypeDto;
    /**
     * 
     * @type {Date}
     * @memberof ToolDto
     */
    createdTime: Date;
    /**
     * 
     * @type {number}
     * @memberof ToolDto
     */
    createdById: number;
    /**
     * 
     * @type {Date}
     * @memberof ToolDto
     */
    modifiedTime?: Date;
    /**
     * 
     * @type {number}
     * @memberof ToolDto
     */
    modifiedById?: number;
}


/**
 * @export
 */
export const ToolDtoStatusEnum = {
    Available: 'AVAILABLE',
    Unavailable: 'UNAVAILABLE',
    Service: 'SERVICE'
} as const;
export type ToolDtoStatusEnum = typeof ToolDtoStatusEnum[keyof typeof ToolDtoStatusEnum];


/**
 * Check if a given object implements the ToolDto interface.
 */
export function instanceOfToolDto(value: object): value is ToolDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('serial' in value) || value['serial'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('createdTime' in value) || value['createdTime'] === undefined) return false;
    if (!('createdById' in value) || value['createdById'] === undefined) return false;
    return true;
}

export function ToolDtoFromJSON(json: any): ToolDto {
    return ToolDtoFromJSONTyped(json, false);
}

export function ToolDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ToolDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'serial': json['serial'],
        'status': json['status'],
        'type': ToolTypeDtoFromJSON(json['type']),
        'createdTime': (new Date(json['createdTime'])),
        'createdById': json['createdById'],
        'modifiedTime': json['modifiedTime'] == null ? undefined : (new Date(json['modifiedTime'])),
        'modifiedById': json['modifiedById'] == null ? undefined : json['modifiedById'],
    };
}

export function ToolDtoToJSON(json: any): ToolDto {
    return ToolDtoToJSONTyped(json, false);
}

export function ToolDtoToJSONTyped(value?: ToolDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'serial': value['serial'],
        'status': value['status'],
        'type': ToolTypeDtoToJSON(value['type']),
        'createdTime': ((value['createdTime']).toISOString()),
        'createdById': value['createdById'],
        'modifiedTime': value['modifiedTime'] == null ? undefined : ((value['modifiedTime']).toISOString()),
        'modifiedById': value['modifiedById'],
    };
}

