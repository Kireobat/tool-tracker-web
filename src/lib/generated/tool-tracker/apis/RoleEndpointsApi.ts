/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PatchUserMapRoleDto,
  RoleDto,
  ToolTrackerPageDtoRoleDto,
  ToolTrackerResponseDto,
  UserMapRoleDto,
} from '../models/index';
import {
    PatchUserMapRoleDtoFromJSON,
    PatchUserMapRoleDtoToJSON,
    RoleDtoFromJSON,
    RoleDtoToJSON,
    ToolTrackerPageDtoRoleDtoFromJSON,
    ToolTrackerPageDtoRoleDtoToJSON,
    ToolTrackerResponseDtoFromJSON,
    ToolTrackerResponseDtoToJSON,
    UserMapRoleDtoFromJSON,
    UserMapRoleDtoToJSON,
} from '../models/index';

export interface GetRoleRequest {
    id: number;
}

export interface GetRolesRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
    name?: string;
    description?: string;
}

export interface GiveRoleRequest {
    patchUserMapRoleDto: PatchUserMapRoleDto;
}

export interface TakeRoleRequest {
    patchUserMapRoleDto: PatchUserMapRoleDto;
}

/**
 * 
 */
export class RoleEndpointsApi extends runtime.BaseAPI {

    /**
     * Retrieves a role by its ID. Requires EMPLOYEE role.
     * Get a role by ID
     */
    async getRoleRaw(requestParameters: GetRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/roles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleDtoFromJSON(jsonValue));
    }

    /**
     * Retrieves a role by its ID. Requires EMPLOYEE role.
     * Get a role by ID
     */
    async getRole(requestParameters: GetRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleDto> {
        const response = await this.getRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a paginated list of all roles, optionally filtered by name or description. Requires EMPLOYEE role.
     * Get all roles
     */
    async getRolesRaw(requestParameters: GetRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolTrackerPageDtoRoleDto>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolTrackerPageDtoRoleDtoFromJSON(jsonValue));
    }

    /**
     * Retrieves a paginated list of all roles, optionally filtered by name or description. Requires EMPLOYEE role.
     * Get all roles
     */
    async getRoles(requestParameters: GetRolesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolTrackerPageDtoRoleDto> {
        const response = await this.getRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assigns a role to a user based on the provided details. Requires ADMIN role.
     * Assign a role to a user
     */
    async giveRoleRaw(requestParameters: GiveRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserMapRoleDto>> {
        if (requestParameters['patchUserMapRoleDto'] == null) {
            throw new runtime.RequiredError(
                'patchUserMapRoleDto',
                'Required parameter "patchUserMapRoleDto" was null or undefined when calling giveRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/roles/give`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PatchUserMapRoleDtoToJSON(requestParameters['patchUserMapRoleDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserMapRoleDtoFromJSON(jsonValue));
    }

    /**
     * Assigns a role to a user based on the provided details. Requires ADMIN role.
     * Assign a role to a user
     */
    async giveRole(requestParameters: GiveRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserMapRoleDto> {
        const response = await this.giveRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a role from a user based on the provided details. Requires ADMIN role.
     * Remove a role from a user
     */
    async takeRoleRaw(requestParameters: TakeRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolTrackerResponseDto>> {
        if (requestParameters['patchUserMapRoleDto'] == null) {
            throw new runtime.RequiredError(
                'patchUserMapRoleDto',
                'Required parameter "patchUserMapRoleDto" was null or undefined when calling takeRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/roles/take`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PatchUserMapRoleDtoToJSON(requestParameters['patchUserMapRoleDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolTrackerResponseDtoFromJSON(jsonValue));
    }

    /**
     * Removes a role from a user based on the provided details. Requires ADMIN role.
     * Remove a role from a user
     */
    async takeRole(requestParameters: TakeRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolTrackerResponseDto> {
        const response = await this.takeRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
