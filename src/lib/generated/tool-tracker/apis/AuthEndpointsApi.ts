/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ToolTrackerResponseDto,
  UserDto,
} from '../models/index';
import {
    ToolTrackerResponseDtoFromJSON,
    ToolTrackerResponseDtoToJSON,
    UserDtoFromJSON,
    UserDtoToJSON,
} from '../models/index';

/**
 * 
 */
export class AuthEndpointsApi extends runtime.BaseAPI {

    /**
     * Returns the profile information of the authenticated user.
     * Get the profile of the authenticated user
     */
    async getProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoFromJSON(jsonValue));
    }

    /**
     * Returns the profile information of the authenticated user.
     * Get the profile of the authenticated user
     */
    async getProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDto> {
        const response = await this.getProfileRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns true if the authenticated user has the ADMIN role, 401 if not.
     * Check if the authenticated user is an admin
     */
    async isAdminRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/isAdmin`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Returns true if the authenticated user has the ADMIN role, 401 if not.
     * Check if the authenticated user is an admin
     */
    async isAdmin(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.isAdminRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns true if the authenticated user has the EMPLOYEE role, 401 if not.
     * Check if the authenticated user is an employee
     */
    async isEmployeeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/isEmployee`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Returns true if the authenticated user has the EMPLOYEE role, 401 if not.
     * Check if the authenticated user is an employee
     */
    async isEmployee(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.isEmployeeRaw(initOverrides);
        return await response.value();
    }

}
