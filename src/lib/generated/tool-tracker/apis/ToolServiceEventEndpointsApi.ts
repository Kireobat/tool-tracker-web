/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateToolServiceEventDto,
  ToolServiceEventDto,
  ToolTrackerPageDtoToolServiceEventDto,
  ToolTrackerResponseDto,
} from '../models/index';
import {
    CreateToolServiceEventDtoFromJSON,
    CreateToolServiceEventDtoToJSON,
    ToolServiceEventDtoFromJSON,
    ToolServiceEventDtoToJSON,
    ToolTrackerPageDtoToolServiceEventDtoFromJSON,
    ToolTrackerPageDtoToolServiceEventDtoToJSON,
    ToolTrackerResponseDtoFromJSON,
    ToolTrackerResponseDtoToJSON,
} from '../models/index';

export interface CreateServiceEventRequest {
    createToolServiceEventDto: CreateToolServiceEventDto;
}

export interface GetServiceEventsRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
    toolId?: number;
    damageReportId?: number;
    lendingAgreementId?: number;
    searchPeriodStart?: Date;
    searchPeriodStop?: Date;
}

export interface GetServiceEventsByIdRequest {
    id: number;
}

/**
 * 
 */
export class ToolServiceEventEndpointsApi extends runtime.BaseAPI {

    /**
     */
    async createServiceEventRaw(requestParameters: CreateServiceEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolServiceEventDto>> {
        if (requestParameters['createToolServiceEventDto'] == null) {
            throw new runtime.RequiredError(
                'createToolServiceEventDto',
                'Required parameter "createToolServiceEventDto" was null or undefined when calling createServiceEvent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/tools/service/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateToolServiceEventDtoToJSON(requestParameters['createToolServiceEventDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolServiceEventDtoFromJSON(jsonValue));
    }

    /**
     */
    async createServiceEvent(requestParameters: CreateServiceEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolServiceEventDto> {
        const response = await this.createServiceEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getServiceEventsRaw(requestParameters: GetServiceEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolTrackerPageDtoToolServiceEventDto>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['toolId'] != null) {
            queryParameters['toolId'] = requestParameters['toolId'];
        }

        if (requestParameters['damageReportId'] != null) {
            queryParameters['damageReportId'] = requestParameters['damageReportId'];
        }

        if (requestParameters['lendingAgreementId'] != null) {
            queryParameters['lendingAgreementId'] = requestParameters['lendingAgreementId'];
        }

        if (requestParameters['searchPeriodStart'] != null) {
            queryParameters['searchPeriodStart'] = (requestParameters['searchPeriodStart'] as any).toISOString();
        }

        if (requestParameters['searchPeriodStop'] != null) {
            queryParameters['searchPeriodStop'] = (requestParameters['searchPeriodStop'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/tools/service`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolTrackerPageDtoToolServiceEventDtoFromJSON(jsonValue));
    }

    /**
     */
    async getServiceEvents(requestParameters: GetServiceEventsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolTrackerPageDtoToolServiceEventDto> {
        const response = await this.getServiceEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getServiceEventsByIdRaw(requestParameters: GetServiceEventsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolServiceEventDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getServiceEventsById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/tools/service/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolServiceEventDtoFromJSON(jsonValue));
    }

    /**
     */
    async getServiceEventsById(requestParameters: GetServiceEventsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolServiceEventDto> {
        const response = await this.getServiceEventsByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
