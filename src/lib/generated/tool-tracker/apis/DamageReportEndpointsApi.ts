/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateDamageReportDto,
  DamageReportDto,
  ToolTrackerPageDtoDamageReportDto,
  ToolTrackerResponseDto,
} from '../models/index';
import {
    CreateDamageReportDtoFromJSON,
    CreateDamageReportDtoToJSON,
    DamageReportDtoFromJSON,
    DamageReportDtoToJSON,
    ToolTrackerPageDtoDamageReportDtoFromJSON,
    ToolTrackerPageDtoDamageReportDtoToJSON,
    ToolTrackerResponseDtoFromJSON,
    ToolTrackerResponseDtoToJSON,
} from '../models/index';

export interface CreateReportRequest {
    createDamageReportDto: CreateDamageReportDto;
}

export interface GetReportRequest {
    id: number;
}

export interface GetReportsRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
    lendingAgreementId?: number;
    toolId?: number;
}

/**
 * 
 */
export class DamageReportEndpointsApi extends runtime.BaseAPI {

    /**
     */
    async createReportRaw(requestParameters: CreateReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DamageReportDto>> {
        if (requestParameters['createDamageReportDto'] == null) {
            throw new runtime.RequiredError(
                'createDamageReportDto',
                'Required parameter "createDamageReportDto" was null or undefined when calling createReport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/reports/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDamageReportDtoToJSON(requestParameters['createDamageReportDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DamageReportDtoFromJSON(jsonValue));
    }

    /**
     */
    async createReport(requestParameters: CreateReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DamageReportDto> {
        const response = await this.createReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getReportRaw(requestParameters: GetReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DamageReportDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getReport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/reports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DamageReportDtoFromJSON(jsonValue));
    }

    /**
     */
    async getReport(requestParameters: GetReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DamageReportDto> {
        const response = await this.getReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getReportsRaw(requestParameters: GetReportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolTrackerPageDtoDamageReportDto>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['lendingAgreementId'] != null) {
            queryParameters['lendingAgreementId'] = requestParameters['lendingAgreementId'];
        }

        if (requestParameters['toolId'] != null) {
            queryParameters['toolId'] = requestParameters['toolId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/reports`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolTrackerPageDtoDamageReportDtoFromJSON(jsonValue));
    }

    /**
     */
    async getReports(requestParameters: GetReportsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolTrackerPageDtoDamageReportDto> {
        const response = await this.getReportsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
