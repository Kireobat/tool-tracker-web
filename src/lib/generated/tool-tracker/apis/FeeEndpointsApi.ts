/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateFeeDto,
  FeeDto,
  ToolTrackerPageDtoFeeDto,
  ToolTrackerResponseDto,
} from '../models/index';
import {
    CreateFeeDtoFromJSON,
    CreateFeeDtoToJSON,
    FeeDtoFromJSON,
    FeeDtoToJSON,
    ToolTrackerPageDtoFeeDtoFromJSON,
    ToolTrackerPageDtoFeeDtoToJSON,
    ToolTrackerResponseDtoFromJSON,
    ToolTrackerResponseDtoToJSON,
} from '../models/index';

export interface CreateFeeRequest {
    createFeeDto: CreateFeeDto;
}

export interface GetFeeRequest {
    id: number;
}

export interface GetFeesRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
    lendingAgreementId?: number;
    borrowerId?: number;
    status?: GetFeesStatusEnum;
    feeAmountMin?: number;
    feeAmountMax?: number;
}

/**
 * 
 */
export class FeeEndpointsApi extends runtime.BaseAPI {

    /**
     */
    async createFeeRaw(requestParameters: CreateFeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeeDto>> {
        if (requestParameters['createFeeDto'] == null) {
            throw new runtime.RequiredError(
                'createFeeDto',
                'Required parameter "createFeeDto" was null or undefined when calling createFee().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/fees/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFeeDtoToJSON(requestParameters['createFeeDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeeDtoFromJSON(jsonValue));
    }

    /**
     */
    async createFee(requestParameters: CreateFeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeeDto> {
        const response = await this.createFeeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFeeRaw(requestParameters: GetFeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeeDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getFee().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/fees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeeDtoFromJSON(jsonValue));
    }

    /**
     */
    async getFee(requestParameters: GetFeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeeDto> {
        const response = await this.getFeeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFeesRaw(requestParameters: GetFeesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolTrackerPageDtoFeeDto>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['lendingAgreementId'] != null) {
            queryParameters['lendingAgreementId'] = requestParameters['lendingAgreementId'];
        }

        if (requestParameters['borrowerId'] != null) {
            queryParameters['borrowerId'] = requestParameters['borrowerId'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['feeAmountMin'] != null) {
            queryParameters['feeAmountMin'] = requestParameters['feeAmountMin'];
        }

        if (requestParameters['feeAmountMax'] != null) {
            queryParameters['feeAmountMax'] = requestParameters['feeAmountMax'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/fees`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolTrackerPageDtoFeeDtoFromJSON(jsonValue));
    }

    /**
     */
    async getFees(requestParameters: GetFeesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolTrackerPageDtoFeeDto> {
        const response = await this.getFeesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetFeesStatusEnum = {
    Paid: 'PAID',
    Unpaid: 'UNPAID',
    Disputed: 'DISPUTED'
} as const;
export type GetFeesStatusEnum = typeof GetFeesStatusEnum[keyof typeof GetFeesStatusEnum];
