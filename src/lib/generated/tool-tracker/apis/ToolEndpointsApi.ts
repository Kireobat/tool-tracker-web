/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RegisterToolDto,
  ToolDto,
  ToolTrackerPageDtoToolDto,
  ToolTrackerResponseDto,
} from '../models/index';
import {
    RegisterToolDtoFromJSON,
    RegisterToolDtoToJSON,
    ToolDtoFromJSON,
    ToolDtoToJSON,
    ToolTrackerPageDtoToolDtoFromJSON,
    ToolTrackerPageDtoToolDtoToJSON,
    ToolTrackerResponseDtoFromJSON,
    ToolTrackerResponseDtoToJSON,
} from '../models/index';

export interface GetToolRequest {
    id: number;
}

export interface GetToolsRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
    name?: string;
    serial?: string;
    toolTypeId?: number;
    status?: GetToolsStatusEnum;
}

export interface RegisterToolRequest {
    registerToolDto: RegisterToolDto;
}

/**
 * 
 */
export class ToolEndpointsApi extends runtime.BaseAPI {

    /**
     * Retrieves a tool by its ID. If the tool is not available, access is restricted based on user authentication and role.
     * Get a tool by ID
     */
    async getToolRaw(requestParameters: GetToolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTool().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/tools/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolDtoFromJSON(jsonValue));
    }

    /**
     * Retrieves a tool by its ID. If the tool is not available, access is restricted based on user authentication and role.
     * Get a tool by ID
     */
    async getTool(requestParameters: GetToolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolDto> {
        const response = await this.getToolRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a paginated list of all tools, optionally filtered by name, serial number, tool type ID, or status. If the user is not authenticated or does not have the EMPLOYEE role, only available tools are returned.
     * Get all tools
     */
    async getToolsRaw(requestParameters: GetToolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolTrackerPageDtoToolDto>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['serial'] != null) {
            queryParameters['serial'] = requestParameters['serial'];
        }

        if (requestParameters['toolTypeId'] != null) {
            queryParameters['toolTypeId'] = requestParameters['toolTypeId'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/tools`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolTrackerPageDtoToolDtoFromJSON(jsonValue));
    }

    /**
     * Retrieves a paginated list of all tools, optionally filtered by name, serial number, tool type ID, or status. If the user is not authenticated or does not have the EMPLOYEE role, only available tools are returned.
     * Get all tools
     */
    async getTools(requestParameters: GetToolsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolTrackerPageDtoToolDto> {
        const response = await this.getToolsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Registers a new tool based on the provided details. Requires EMPLOYEE role.
     * Register a new tool
     */
    async registerToolRaw(requestParameters: RegisterToolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolDto>> {
        if (requestParameters['registerToolDto'] == null) {
            throw new runtime.RequiredError(
                'registerToolDto',
                'Required parameter "registerToolDto" was null or undefined when calling registerTool().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/tools/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterToolDtoToJSON(requestParameters['registerToolDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolDtoFromJSON(jsonValue));
    }

    /**
     * Registers a new tool based on the provided details. Requires EMPLOYEE role.
     * Register a new tool
     */
    async registerTool(requestParameters: RegisterToolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolDto> {
        const response = await this.registerToolRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetToolsStatusEnum = {
    Available: 'AVAILABLE',
    Unavailable: 'UNAVAILABLE',
    Service: 'SERVICE'
} as const;
export type GetToolsStatusEnum = typeof GetToolsStatusEnum[keyof typeof GetToolsStatusEnum];
