/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginDto,
  RegisterUserDto,
  ToolTrackerPageDtoUserDto,
  ToolTrackerResponseDto,
  UserDto,
} from '../models/index';
import {
    LoginDtoFromJSON,
    LoginDtoToJSON,
    RegisterUserDtoFromJSON,
    RegisterUserDtoToJSON,
    ToolTrackerPageDtoUserDtoFromJSON,
    ToolTrackerPageDtoUserDtoToJSON,
    ToolTrackerResponseDtoFromJSON,
    ToolTrackerResponseDtoToJSON,
    UserDtoFromJSON,
    UserDtoToJSON,
} from '../models/index';

export interface GetUserRequest {
    id: number;
}

export interface GetUsersRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
    name?: string;
    email?: string;
}

export interface LoginRequest {
    loginDto: LoginDto;
}

export interface RegisterUserRequest {
    registerUserDto: RegisterUserDto;
}

/**
 * 
 */
export class UserEndpointsApi extends runtime.BaseAPI {

    /**
     * Retrieves a user by their ID. Requires EMPLOYEE role.
     * Get a user by ID
     */
    async getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoFromJSON(jsonValue));
    }

    /**
     * Retrieves a user by their ID. Requires EMPLOYEE role.
     * Get a user by ID
     */
    async getUser(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDto> {
        const response = await this.getUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a paginated list of all users, optionally filtered by name or email. Requires EMPLOYEE role.
     * Get all users
     */
    async getUsersRaw(requestParameters: GetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolTrackerPageDtoUserDto>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolTrackerPageDtoUserDtoFromJSON(jsonValue));
    }

    /**
     * Retrieves a paginated list of all users, optionally filtered by name or email. Requires EMPLOYEE role.
     * Get all users
     */
    async getUsers(requestParameters: GetUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolTrackerPageDtoUserDto> {
        const response = await this.getUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs in a user based on the provided credentials. If successful, the user will be authenticated and a session will be created.
     * Login a user
     */
    async loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolTrackerResponseDto>> {
        if (requestParameters['loginDto'] == null) {
            throw new runtime.RequiredError(
                'loginDto',
                'Required parameter "loginDto" was null or undefined when calling login().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/user/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginDtoToJSON(requestParameters['loginDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolTrackerResponseDtoFromJSON(jsonValue));
    }

    /**
     * Logs in a user based on the provided credentials. If successful, the user will be authenticated and a session will be created.
     * Login a user
     */
    async login(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolTrackerResponseDto> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Registers a new user based on the provided details. The user will be assigned a default role. Does not require authentication.
     * Register a new user
     */
    async registerUserRaw(requestParameters: RegisterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolTrackerResponseDto>> {
        if (requestParameters['registerUserDto'] == null) {
            throw new runtime.RequiredError(
                'registerUserDto',
                'Required parameter "registerUserDto" was null or undefined when calling registerUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/user/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterUserDtoToJSON(requestParameters['registerUserDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolTrackerResponseDtoFromJSON(jsonValue));
    }

    /**
     * Registers a new user based on the provided details. The user will be assigned a default role. Does not require authentication.
     * Register a new user
     */
    async registerUser(requestParameters: RegisterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolTrackerResponseDto> {
        const response = await this.registerUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
