/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateLendingAgreementDto,
  LendingAgreementDto,
  PatchLendingAgreementDto,
  ToolTrackerPageDtoLendingAgreementDto,
  ToolTrackerResponseDto,
} from '../models/index';
import {
    CreateLendingAgreementDtoFromJSON,
    CreateLendingAgreementDtoToJSON,
    LendingAgreementDtoFromJSON,
    LendingAgreementDtoToJSON,
    PatchLendingAgreementDtoFromJSON,
    PatchLendingAgreementDtoToJSON,
    ToolTrackerPageDtoLendingAgreementDtoFromJSON,
    ToolTrackerPageDtoLendingAgreementDtoToJSON,
    ToolTrackerResponseDtoFromJSON,
    ToolTrackerResponseDtoToJSON,
} from '../models/index';

export interface CreateAgreementRequest {
    createLendingAgreementDto: CreateLendingAgreementDto;
}

export interface GetAgreementRequest {
    id: number;
}

export interface GetAgreementsRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
    toolId?: number;
    borrowerId?: number;
    lentAfter?: Date;
    lentBefore?: Date;
}

export interface PatchAgreementRequest {
    patchLendingAgreementDto: PatchLendingAgreementDto;
}

/**
 * 
 */
export class LendingAgreementEndpointsApi extends runtime.BaseAPI {

    /**
     */
    async createAgreementRaw(requestParameters: CreateAgreementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LendingAgreementDto>> {
        if (requestParameters['createLendingAgreementDto'] == null) {
            throw new runtime.RequiredError(
                'createLendingAgreementDto',
                'Required parameter "createLendingAgreementDto" was null or undefined when calling createAgreement().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/agreements/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLendingAgreementDtoToJSON(requestParameters['createLendingAgreementDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LendingAgreementDtoFromJSON(jsonValue));
    }

    /**
     */
    async createAgreement(requestParameters: CreateAgreementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LendingAgreementDto> {
        const response = await this.createAgreementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAgreementRaw(requestParameters: GetAgreementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LendingAgreementDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAgreement().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/agreements/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LendingAgreementDtoFromJSON(jsonValue));
    }

    /**
     */
    async getAgreement(requestParameters: GetAgreementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LendingAgreementDto> {
        const response = await this.getAgreementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAgreementsRaw(requestParameters: GetAgreementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolTrackerPageDtoLendingAgreementDto>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['toolId'] != null) {
            queryParameters['toolId'] = requestParameters['toolId'];
        }

        if (requestParameters['borrowerId'] != null) {
            queryParameters['borrowerId'] = requestParameters['borrowerId'];
        }

        if (requestParameters['lentAfter'] != null) {
            queryParameters['lentAfter'] = (requestParameters['lentAfter'] as any).toISOString();
        }

        if (requestParameters['lentBefore'] != null) {
            queryParameters['lentBefore'] = (requestParameters['lentBefore'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/agreements`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolTrackerPageDtoLendingAgreementDtoFromJSON(jsonValue));
    }

    /**
     */
    async getAgreements(requestParameters: GetAgreementsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolTrackerPageDtoLendingAgreementDto> {
        const response = await this.getAgreementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async patchAgreementRaw(requestParameters: PatchAgreementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LendingAgreementDto>> {
        if (requestParameters['patchLendingAgreementDto'] == null) {
            throw new runtime.RequiredError(
                'patchLendingAgreementDto',
                'Required parameter "patchLendingAgreementDto" was null or undefined when calling patchAgreement().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/agreements/{id}/patch`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchLendingAgreementDtoToJSON(requestParameters['patchLendingAgreementDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LendingAgreementDtoFromJSON(jsonValue));
    }

    /**
     */
    async patchAgreement(requestParameters: PatchAgreementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LendingAgreementDto> {
        const response = await this.patchAgreementRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
