/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ToolTrackerPageDtoToolTypeDto,
  ToolTrackerResponseDto,
  ToolTypeDto,
} from '../models/index';
import {
    ToolTrackerPageDtoToolTypeDtoFromJSON,
    ToolTrackerPageDtoToolTypeDtoToJSON,
    ToolTrackerResponseDtoFromJSON,
    ToolTrackerResponseDtoToJSON,
    ToolTypeDtoFromJSON,
    ToolTypeDtoToJSON,
} from '../models/index';

export interface CreateToolTypeRequest {
    name: string;
}

export interface GetToolTypeRequest {
    id: number;
}

export interface GetToolTypesRequest {
    page?: number;
    size?: number;
    sort?: Array<string>;
    name?: string;
}

/**
 * 
 */
export class ToolTypeEndpointsApi extends runtime.BaseAPI {

    /**
     */
    async createToolTypeRaw(requestParameters: CreateToolTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolTypeDto>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling createToolType().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/types/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolTypeDtoFromJSON(jsonValue));
    }

    /**
     */
    async createToolType(requestParameters: CreateToolTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolTypeDto> {
        const response = await this.createToolTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getToolTypeRaw(requestParameters: GetToolTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolTypeDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getToolType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolTypeDtoFromJSON(jsonValue));
    }

    /**
     */
    async getToolType(requestParameters: GetToolTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolTypeDto> {
        const response = await this.getToolTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getToolTypesRaw(requestParameters: GetToolTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolTrackerPageDtoToolTypeDto>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolTrackerPageDtoToolTypeDtoFromJSON(jsonValue));
    }

    /**
     */
    async getToolTypes(requestParameters: GetToolTypesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolTrackerPageDtoToolTypeDto> {
        const response = await this.getToolTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
